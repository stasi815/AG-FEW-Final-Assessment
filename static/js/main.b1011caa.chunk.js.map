{"version":3,"sources":["logo.svg","Heading.js","BandCount.js","LikeCounter.js","Band.js","BandsList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Heading","BandCount","data","length","LikeCounter","props","state","likes","this","setState","onClick","e","likeCount","Component","Band","band_name","formed","origin","fans","split","style","BandList","bands","map","key","className","finalStyle","display","flexDirection","justifyContent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"o6MAAAA,EAAOC,QAAU,IAA0B,kC,8HCQ5BC,MANf,WACI,OACI,6E,OCKOC,MANf,WACI,MACI,gBAAkBC,EAAKC,Q,4BCiBhBC,E,kDAlBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CAACC,MAAO,GAHN,E,wDAMN,IACDA,EAAUC,KAAKF,MAAfC,MACRC,KAAKC,SAAS,CAAEF,MAAOA,EAAQ,M,+BAGzB,IAAD,OACGA,EAAUC,KAAKF,MAAfC,MACR,OAAO,4BAAQG,QAAS,SAACC,GAAO,EAAKC,cAA9B,SAAmDL,O,GAdxCM,aC6BXC,MA5Bf,SAAcT,GAAQ,IACVU,EAAkDV,EAAlDU,UAAWC,EAAuCX,EAAvCW,OAAQC,EAA+BZ,EAA/BY,OAAQC,EAAuBb,EAAvBa,KAAMC,EAAiBd,EAAjBc,MAAOC,EAAUf,EAAVe,MAChD,MAAW,KAARD,EAEK,6BACI,4BAAMJ,GACN,2CAAkBC,GAClB,+CAAsBC,GACtB,8CAAqBC,GACrB,qCAAYE,GACZ,mDAA0BD,GAC1B,kBAAC,EAAD,OAKJ,6BACI,4BAAMJ,GACN,2CAAkBC,GAClB,+CAAsBC,GACtB,8CAAqBC,GACrB,qCAAYE,GACZ,mDAA0BD,K,MCE3BE,MAvBf,WAEI,IAAMC,EAAQpB,EAAKqB,KAAI,YAAwD,IAArDR,EAAoD,EAApDA,UAAWC,EAAyC,EAAzCA,OAAQC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,KAAME,EAAmB,EAAnBA,MAAOD,EAAY,EAAZA,MAC9D,OACI,kBAAC,EAAD,CACIK,IAAQT,EACRA,UAAcA,EACdC,OAAWA,EACXC,OAAWA,EACXG,MAAUA,EACVD,MAAUA,EACVD,KAASA,OAKrB,OACI,yBAAKO,UAAU,aACTH,IChBRI,EAAa,CACjBC,QAAS,OACTC,cAAe,SACfC,eAAgB,UAeHC,MAZf,WACE,OACE,yBAAKL,UAAU,OACb,yBAAKA,UAAWC,GACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCPYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b1011caa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nfunction Heading() {\n    return(\n        <h1>FEW 1.2 Final Assessment: Anastasia Gallardo</h1>\n    )\n}\n\nexport default Heading\n","import React from 'react';\nimport data from './metal.json'\n\nfunction BandCount() {\n    return (\n        \"Total Bands: \" + data.length\n    )\n}\n\nexport default BandCount\n","import React, { Component } from 'react';\n\n\nclass LikeCounter extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {likes: 0  }\n    }\n\n    likeCount() {\n        const { likes } = this.state\n        this.setState({ likes: likes + 1 })\n    }\n\n    render() {\n        const { likes } = this.state\n        return <button onClick={(e) => {this.likeCount()}}>Like: {likes}</button>\n    }\n\n}\n\nexport default LikeCounter","import React from 'react';\nimport data from './metal.json';\nimport LikeCounter from './LikeCounter';\n\nfunction Band(props) {\n    const { band_name, formed, origin, fans, split, style } = props\n    if(split== \"-\") {\n        return (\n            <div>\n                <h1>{ band_name }</h1>\n                <p>Year formed: { formed }</p>\n                <p>Place of origin: { origin }</p>\n                <p>Number of fans: { fans }</p>\n                <p>Style: { style }</p>\n                <p>Year they disbanded: { split }</p>\n                <LikeCounter />\n            </div>\n)\n    } else {\n        return (\n            <div>\n                <h1>{ band_name }</h1>\n                <p>Year formed: { formed }</p>\n                <p>Place of origin: { origin }</p>\n                <p>Number of fans: { fans }</p>\n                <p>Style: { style }</p>\n                <p>Year they disbanded: { split }</p>\n            </div>\n        )\n    }\n}\n\nexport default Band\n","import React from 'react';\nimport Band from './Band';\nimport './BandsList.css'\n;import data from './metal.json';\n\nfunction BandList() {\n\n    const bands = data.map(({ band_name, formed, origin, fans, style, split }) => {\n        return (\n            <Band\n                key = { band_name }\n                band_name = { band_name }\n                formed = { formed }\n                origin = { origin }\n                style=  { style }\n                split = { split }\n                fans = { fans }\n            />\n        )\n    })\n\n    return (\n        <div className='BandsList'>\n            { bands }\n        </div>\n    )\n}\n\nexport default BandList\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Heading from './Heading';\nimport BandCount from './BandCount';\nimport BandsList from './BandsList';\n\nconst finalStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className={finalStyle}>\n        <Heading />\n        <BandCount />\n        <BandsList />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}